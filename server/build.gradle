/*
 * Copyright 2020 the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at:
 *
 * https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

plugins {
  id 'checkstyle'
  id 'com.github.ben-manes.versions' version "${gradleVersionsPlugin}"
  id 'com.github.spotbugs' version "${spotbugsVersion}"
  id 'com.palantir.docker' version "${dockerGradleVersion}"
  id 'de.aaschmid.cpd' version "${cpdVersion}"
  id 'io.spring.dependency-management' version "${springDependencyManagementVersion}"
  id 'jacoco'
  id 'java'
  id 'org.springframework.boot' version "${springBootVersion}"
}

java {
  sourceCompatibility = JavaVersion.VERSION_11
  targetCompatibility = JavaVersion.VERSION_11
}

compileJava {
  options.compilerArgs << '-Xlint:all,-processing'
}

configurations {
  checkstyleConfig
  compileOnly {
    extendsFrom annotationProcessor
  }
  developmentOnly
  runtimeClasspath {
    extendsFrom developmentOnly
  }
}

bootJar {
  manifest {
    attributes(
        'Implementation-Title': 'Switchboard',
        'Implementation-Version': rootProject.version
    )
  }
}

test {
  useJUnitPlatform {
    excludeTags "integration"
  }
}

task('integrationTest', type: Test) {
  group "Verification"
  description "Runs integration tests."
  useJUnitPlatform {
    includeTags "integration"
  }
}

check {
  dependsOn test
  dependsOn integrationTest
  jacocoTestReport {
    executionData test, integrationTest
  }
  finalizedBy jacocoTestReport
}

repositories {
  mavenCentral()
}

dependencies {
  implementation 'org.springframework.boot:spring-boot-starter-actuator'

  implementation('org.springframework.boot:spring-boot-starter-web') {
    exclude group: 'org.springframework.boot', module: 'spring-boot-starter-tomcat'
  }
  implementation 'org.springframework.boot:spring-boot-starter-jetty'

  implementation "io.springfox:springfox-swagger2:${springfoxSwaggerVersion}"
  implementation "io.springfox:springfox-swagger-ui:${springfoxSwaggerVersion}"
  implementation "io.springfox:springfox-bean-validators:${springfoxSwaggerVersion}"

  annotationProcessor 'org.projectlombok:lombok'
  compileOnly 'org.projectlombok:lombok'

  implementation 'org.springframework.boot:spring-boot-starter-data-mongodb'

  implementation "org.apache.commons:commons-lang3:${commonsLangVersion}"

  implementation "org.mapstruct:mapstruct:${mapstructVersion}"
  annotationProcessor "org.mapstruct:mapstruct-processor:${mapstructVersion}"

  annotationProcessor 'org.springframework.boot:spring-boot-configuration-processor'
  developmentOnly 'org.springframework.boot:spring-boot-devtools'

  checkstyleConfig("com.puppycrawl.tools:checkstyle:${checkstyleToolVersion}") {
    transitive = false
  }
  spotbugsPlugins "com.h3xstream.findsecbugs:findsecbugs-plugin:${findsecbugsVersion}"
  spotbugsPlugins "com.mebigfatguy.fb-contrib:fb-contrib:${findBugsContribVersion}"

  testImplementation 'org.springframework.boot:spring-boot-starter-test'
  testImplementation "io.rest-assured:rest-assured-all:${restAssuredVersion}"
  testImplementation "io.rest-assured:spring-mock-mvc:${restAssuredVersion}"
  testImplementation "com.google.code.gson:gson:${gsonVersion}"
}

checkstyle {
  toolVersion "${checkstyleToolVersion}"
  maxErrors 0
  config = resources.text.fromArchiveEntry(configurations.checkstyleConfig, 'google_checks.xml')
}

cpdCheck {
  ignoreFailures = true
  source = sourceSets.main.allJava
}

spotbugs {
  effort = 'max'
  ignoreFailures = true
  reportLevel = 'low'
  showProgress = true
}

spotbugsMain {
  reports {
    xml {
      enabled = true
    }
  }
}

docker {
  name 'telegraph/switchboard'
  tags 'latest'
  dockerfile file('src/main/docker/Dockerfile')
  files tasks.bootJar.outputs, 'src/main/docker/wait-for-it.sh', 'src/main/docker/spring-boot.sh'
}
